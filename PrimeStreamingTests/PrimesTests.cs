using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace PrimeStreaming.Tests
{
    [TestClass()]
    public class PrimesTests
    {
        private Primes PrimesGenerator = new Primes();

        [TestMethod()]
        public void Test_0_10()
        {
            Test(0, 10, new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 });
        }

        [TestMethod()]
        public void Test_10_10()
        {
            Test(10, 10, new int[] { 31, 37, 41, 43, 47, 53, 59, 61, 67, 71 });
        }

        [TestMethod()]
        public void Test_100_10()
        {
            Test(100, 10, new int[] { 547, 557, 563, 569, 571, 577, 587, 593, 599, 601 });
        }

        [TestMethod()]
        public void Test_1000_10()
        {
            Test(1000, 10, new int[] { 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017 });
        }

        [TestMethod()]
        public void Test_2_24_10()
        {
            Test((1 << 24) - 10, 10, new int[] { 310248109, 310248149, 310248151, 310248157, 310248161, 310248163, 310248227, 310248229, 310248233, 310248241 });
        }

        [TestMethod()]
        public void Test_All()
        {
            Test(0, 10, new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 });
            Test(10, 10, new int[] { 31, 37, 41, 43, 47, 53, 59, 61, 67, 71 });
            Test(100, 10, new int[] { 547, 557, 563, 569, 571, 577, 587, 593, 599, 601 });
            Test(1000, 10, new int[] { 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017 });
            Test((1 << 4) - 10, 10, new int[] { 17, 19, 23, 29, 31, 37, 41, 43, 47, 53 });
            Test((1 << 5) - 10, 10, new int[] { 83, 89, 97, 101, 103, 107, 109, 113, 127, 131 });
            Test((1 << 6) - 10, 10, new int[] { 257, 263, 269, 271, 277, 281, 283, 293, 307, 311 });
            Test((1 << 7) - 10, 10, new int[] { 653, 659, 661, 673, 677, 683, 691, 701, 709, 719 });
            Test((1 << 8) - 10, 10, new int[] { 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619 });
            Test((1 << 9) - 10, 10, new int[] { 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 });
            Test((1 << 10) - 10, 10, new int[] { 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161 });
            Test((1 << 11) - 10, 10, new int[] { 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863 });
            Test((1 << 12) - 10, 10, new int[] { 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873 });
            Test((1 << 13) - 10, 10, new int[] { 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017 });
            Test((1 << 14) - 10, 10, new int[] { 180379, 180391, 180413, 180419, 180437, 180463, 180473, 180491, 180497, 180503 });
            Test((1 << 15) - 10, 10, new int[] { 385967, 385991, 385997, 386017, 386039, 386041, 386047, 386051, 386083, 386093 });
            Test((1 << 16) - 10, 10, new int[] { 821477, 821479, 821489, 821497, 821507, 821519, 821551, 821573, 821603, 821641 });
            Test((1 << 17) - 10, 10, new int[] { 1742423, 1742443, 1742453, 1742467, 1742473, 1742497, 1742501, 1742513, 1742527, 1742537 });
            Test((1 << 18) - 10, 10, new int[] { 3681001, 3681017, 3681023, 3681031, 3681037, 3681043, 3681049, 3681059, 3681113, 3681131 });
            Test((1 << 19) - 10, 10, new int[] { 7753903, 7753909, 7753931, 7753939, 7753973, 7754003, 7754009, 7754011, 7754017, 7754077 });
            Test((1 << 20) - 10, 10, new int[] { 16289939, 16289947, 16289951, 16289963, 16289971, 16290007, 16290013, 16290019, 16290041, 16290047 });
            Test((1 << 21) - 10, 10, new int[] { 34135873, 34135883, 34135921, 34135931, 34135939, 34135967, 34135999, 34136009, 34136021, 34136029 });
            Test((1 << 22) - 10, 10, new int[] { 71378449, 71378467, 71378471, 71378491, 71378519, 71378521, 71378533, 71378537, 71378551, 71378569 });
            Test((1 << 23) - 10, 10, new int[] { 148947979, 148948021, 148948043, 148948057, 148948097, 148948099, 148948109, 148948127, 148948133, 148948139 });
            Test((1 << 24) - 10, 10, new int[] { 310248109, 310248149, 310248151, 310248157, 310248161, 310248163, 310248227, 310248229, 310248233, 310248241 });
            Test((1 << 25) - 10, 10, new int[] { 645155053, 645155087, 645155107, 645155113, 645155143, 645155171, 645155177, 645155179, 645155191, 645155197 });
            Test((1 << 26) - 10, 10, new int[] { 1339483969, 1339483993, 1339484017, 1339484023, 1339484071, 1339484123, 1339484137, 1339484141, 1339484149, 1339484197 });
        }

        private void Test(int skip, int limit, params int[] expect)
        {
            int[] found = PrimesGenerator.Stream().Skip(skip).Take(limit).ToArray();
            SequenceEqual(expect, found);
        }

        private void SequenceEqual(int[] a, int[] b)
        {
            Assert.AreEqual(a.Length, b.Length, $"Expected array of length {a.Length} but got {b.Length} elements.");
            for (int i = 0; i < a.Length; i++)
            {
                if (a[i] == b[i]) { continue; }
                Assert.Fail($"Expected {string.Join(", ", a)} but got {string.Join(", ", b)}.");
            }
        }
    }
}